"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-wrap-balancer@1.1.1_react@19.0.0";
exports.ids = ["vendor-chunks/react-wrap-balancer@1.1.1_react@19.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Balancer: () => (/* binding */ P),\n/* harmony export */   Provider: () => (/* binding */ Y),\n/* harmony export */   \"default\": () => (/* binding */ A)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Balancer,Provider,default auto */ \n\nvar E = \"undefined\" == \"undefined\", m = E ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, B = 0, _ = ()=>++B, v = !1;\nfunction O() {\n    let [n, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState(v ? _ : void 0);\n    return m(()=>{\n        n === void 0 && r(_()), v = !0;\n    }, []), n === void 0 ? n : `rwb-${n.toString(32)}`;\n}\nfunction R() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"R.useMemo\": ()=>\"useId\" in react__WEBPACK_IMPORTED_MODULE_0__ ? react__WEBPACK_IMPORTED_MODULE_0__.useId : O\n    }[\"R.useMemo\"], [])();\n}\nvar y = \"__wrap_b\", f = \"__wrap_n\", S = \"__wrap_o\", T = (n, r, e)=>{\n    e = e || document.querySelector(`[data-br=\"${n}\"]`);\n    let t = e == null ? void 0 : e.parentElement;\n    if (!t) return;\n    let l = (u)=>e.style.maxWidth = u + \"px\";\n    e.style.maxWidth = \"\";\n    let i = t.clientWidth, d = t.clientHeight, o = i / 2 - .25, s = i + .5, c;\n    if (i) {\n        for(l(o), o = Math.max(e.scrollWidth, o); o + 1 < s;)c = Math.round((o + s) / 2), l(c), t.clientHeight === d ? s = c : o = c;\n        l(s * r + i * (1 - r));\n    }\n    e.__wrap_o || (typeof ResizeObserver != \"undefined\" ? (e.__wrap_o = new ResizeObserver(()=>{\n        self.__wrap_b(0, +e.dataset.brr, e);\n    })).observe(t) :  true && console.warn(\"The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information\"));\n}, I = T.toString(), w = '(self.CSS&&CSS.supports(\"text-wrap\",\"balance\")?1:2)', g = (n, r, e = \"\")=>(e && (e = `self.${f}!=1&&${e}`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"script\", {\n        suppressHydrationWarning: !0,\n        dangerouslySetInnerHTML: {\n            __html: (n ? \"\" : `self.${f}=self.${f}||${w};self.${y}=${I};`) + e\n        },\n        nonce: r\n    })), h = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    preferNative: !0,\n    hasProvider: !1\n}), Y = ({ preferNative: n = !0, nonce: r, children: e })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"Y.useMemo[t]\": ()=>({\n                preferNative: n,\n                hasProvider: !0\n            })\n    }[\"Y.useMemo[t]\"], [\n        n\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(h.Provider, {\n        value: t\n    }, g(!1, r), e);\n}, P = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ ratio: n = 1, preferNative: r, nonce: e, children: t, as: l, ...i }, d)=>{\n    let o = R(), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), c = react__WEBPACK_IMPORTED_MODULE_0__.useContext(h), u = r != null ? r : c.preferNative, x = l || \"span\";\n    return react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(d, {\n        \"P.useImperativeHandle\": ()=>s.current\n    }[\"P.useImperativeHandle\"], []), m(()=>{\n        u && self[f] === 1 || s.current && (self[y] = T)(0, n, s.current);\n    }, [\n        t,\n        u,\n        n\n    ]), m(()=>{\n        if (!(u && self[f] === 1)) return ()=>{\n            if (!s.current) return;\n            let b = s.current[S];\n            b && (b.disconnect(), delete s.current[S]);\n        };\n    }, [\n        u\n    ]),  true && t && !Array.isArray(t) && typeof t == \"object\" && \"type\" in t && typeof t.type == \"string\" && t.type !== \"span\" && console.warn(`<Balancer> should not wrap <${t.type}> inside. Instead, it should directly wrap text or inline nodes.\n\nTry changing this:\n  <Balancer><${t.type}>content</${t.type}></Balancer>\nTo:\n  <${t.type}><Balancer>content</Balancer></${t.type}>`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(x, {\n        ...i,\n        \"data-br\": o,\n        \"data-brr\": n,\n        ref: s,\n        style: {\n            display: \"inline-block\",\n            verticalAlign: \"top\",\n            textDecoration: \"inherit\",\n            textWrap: u ? \"balance\" : \"initial\"\n        },\n        suppressHydrationWarning: !0\n    }, t), g(c.hasProvider, e, `self.${y}(\"${o}\",${n})`));\n});\nif (!E && \"development\" !== \"production\") {\n    let n = document.querySelector(\"[data-next-hide-fouc]\");\n    if (n) {\n        let r = (t)=>{\n            for (let l of t)for (let i of Array.from(l.removedNodes)){\n                if (i !== n) continue;\n                e.disconnect();\n                let d = document.querySelectorAll(\"[data-br]\");\n                for (let o of Array.from(d))self[y](0, +o.dataset.brr, o);\n            }\n        }, e = new MutationObserver(r);\n        e.observe(document.head, {\n            childList: !0\n        });\n    }\n}\nvar A = P;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Balancer: () => (/* binding */ Balancer),
/* harmony export */   Provider: () => (/* binding */ Provider),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(rsc)/./node_modules/.pnpm/next@15.1.3_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server-edge.js");

const Balancer = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Balancer() from the server but Balancer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/ternera/Documents/github/website/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs",
"Balancer",
);const Provider = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Provider() from the server but Provider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/ternera/Documents/github/website/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs",
"Provider",
);/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call the default export of \"/Users/ternera/Documents/github/website/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/ternera/Documents/github/website/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@19.0.0/node_modules/react-wrap-balancer/dist/index.mjs",
"default",
));


/***/ })

};
;